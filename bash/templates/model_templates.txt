
<<MODEL_BASE>>
from sqlalchemy import Column, ForeignKey, Integer, String
from sqlalchemy.orm import relationship
from app.database import Base

{{ ASSOCIATION_OBJECT }}

class {{ CLASS_NAME }}(Base):

    __tablename__ = "{{ TABLE_NAME }}"

    # {{ CLASS_NAME }} Fields
    id = Column(Integer, primary_key=True, index=True)
    {{ COLUMNS }}

    {{ RELATION }}

<<COLUMN_INTEGER>>
{{ COLUMN_NAME }} = Column(Integer)
{{ COLUMNS }}

<<COLUMN_STRING>>
{{ COLUMN_NAME }} = Column(String)
{{ COLUMNS }}

<<ASSOC_TABLE>>
class {{ SELF_NAME }}{{ OTHER_NAME }}Association(Base):
    __tablename__ = 'pet_trainer_association'

    # Foreign Keys in Association table
    {{ SELF_TABLE_NAME }}_id = Column(ForeignKey('{{ SELF_TABLE_NAME }}.id'), primary_key=True)
    {{ OTHER_TABLE_NAME }}_id = Column(ForeignKey('{{ OTHER_TABLE_NAME }}.id'), primary_key=True)

<<REL_MANY_TO_ONE>>
{{ MANY_TABLE_NAME }}_id = Column(Integer, ForeignKey("{{ SELF_MANY_FKEY }}.id"))
{{ MANY_TABLE_NAME }} = relationship("{{ MANY_TABLE_CLASS }}", back_populates="{{ SELF_POP_FIELD }}", uselist=False)

<<REL_MANY_TO_MANY>>
{{ MANY_TABLE_NAME }} = relationship(
    "{{ MANY_TABLE_CLASS }}", secondary="{{ ASSOC_TABLE_NAME }}", back_populates='{{ SELF_POP_FIELD }}')

<<REL_ONE_TO_ONE>>
{{ ONE_TABLE_NAME }}_id = Column(Integer, ForeignKey("{{ ONE_TABLE_NAME }}.id"))
{{ ONE_TABLE_NAME }} = relationship("{{ MANY_TABLE_CLASS }}", back_populates="{{ SELF_POP_FIELD }}", uselist=False)