
<<MODEL_BASE>>
from sqlalchemy import Column, Integer, String, JSON, DateTime, ForeignKey
from sqlalchemy.orm import relationship
from app.database import Base


{{ ASSOCIATION_OBJECT }}

class {{ SELF_CLASS_STD }}(Base):

    __tablename__ = "{{ TABLE_NAME }}"

    # {{ SELF_CLASS_STD }} Fields
    id = Column(Integer, primary_key=True, index=True)
    {{ COLUMNS }}

    {{ RELATION }}


<<COLUMN_INTEGER>>
{{ COLUMN_NAME }} = Column(Integer)
    {{ COLUMNS }}


<<COLUMN_STRING>>
{{ COLUMN_NAME }} = Column(String)
    {{ COLUMNS }}


<<COLUMN_JSON>>
{{ COLUMN_NAME }} = Column(JSON)
    {{ COLUMNS }}


<<COLUMN_DATETIME>>
{{ COLUMN_NAME }} = Column(DateTime)
    {{ COLUMNS }}


<<ASSOC_TABLE>>
class {{ SELF_CLASS_STD }}{{ OTHER_CLASS_STD }}Association(Base):
    __tablename__ = '{{ SELF_CLASS_LC }}_{{ OTHER_CLASS_LC }}_association'

    # Foreign Keys in Association table
    {{ SELF_CLASS_LC }}_id = Column(ForeignKey('{{ SELF_CLASS_LC }}.id'), primary_key=True)
    {{ OTHER_CLASS_LC }}_id = Column(ForeignKey('{{ OTHER_CLASS_LC }}.id'), primary_key=True)


<<REL_MANY_TO_ONE>>
{{ OTHER_CLASS_LC }}_id = Column(Integer, ForeignKey("{{ SELF_CLASS_LC }}_{{ OTHER_CLASS_LC }}.id"))
    {{ OTHER_CLASS_LC }} = relationship("{{ OTHER_CLASS_STD }}", back_populates="{{ SELF_CLASS_LC }}s", uselist=False)
    
    {{ RELATION }}


<<REL_MANY_TO_MANY>>
{{ OTHER_CLASS_LC }}s = relationship(
        "{{ OTHER_CLASS_STD }}", secondary="{{ ASSOC_CLASS_LC }}", back_populates='{{ SELF_CLASS_LC }}s')


    {{ RELATION }}


<<REL_ONE_TO_ONE>>
{{ OTHER_CLASS_CC }}_id = Column(Integer, ForeignKey("{{ OTHER_CLASS_CC }}.id"))
    {{ OTHER_CLASS_CC }} = relationship("{{ OTHER_CLASS_STD }}", back_populates="{{ SELF_CLASS_LC }}", uselist=False)

    {{ RELATION }}


<<LINK_REL_MANY_TO_ONE>>
{{ OTHER_CLASS_LC }}s = relationship("{{ OTHER_CLASS_STD }}", back_populates="{{ SELF_CLASS_LC }}")
    
    {{ RELATION }}


<<LINK_REL_MANY_TO_MANY>>
{{ OTHER_CLASS_LC }}s = relationship("{{ OTHER_CLASS_STD }}", secondary="{{ OTHER_CLASS_LC }}_{{ SELF_CLASS_LC }}_association", back_populates='{{ SELF_CLASS_LC }}s')

    {{ RELATION }}


<<LINK_REL_ONE_TO_ONE>>
{{ OTHER_CLASS_LC }} = relationship("{{ OTHER_CLASS_STD }}", back_populates="{{ SELF_CLASS_LC }}", uselist=False)

    {{ RELATION }}
