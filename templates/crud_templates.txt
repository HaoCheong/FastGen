
<<CRUD_BASE>>
from sqlalchemy.orm import Session
import app.models.{{ SELF_CLASS_CC }}_model as model
import app.schemas.{{ SELF_CLASS_CC }}_schemas as schemas

{{ CRUDS }}


<<CRUD_CREATE>>
def create_{{ SELF_CLASS_CC }}(db: Session, {{ SELF_CLASS_CC }}: schemas.{{ SELF_CLASS_STD }}Create):
    db_{{ SELF_CLASS_CC }} = model.{{ SELF_CLASS_STD }}(
        {{ CRUD_FIELDS }}
    )

    db.add(db_{{ SELF_CLASS_CC }})
    db.commit()
    db.refresh(db_{{ SELF_CLASS_CC }})
    return db_{{ SELF_CLASS_CC }}

{{ CRUDS }}


<<CREATE_FIELD>>
{{ FIELD_NAME }}={{ SELF_CLASS_CC }}.{{ FIELD_NAME }},
        {{ CRUD_FIELDS }}


<<CRUD_GET_ALL>>
def get_all_{{ SELF_CLASS_CC }}s(db: Session, skip: int = 0, limit: int = 100):
    return db.query(model.{{ SELF_CLASS_STD }}).offset(skip).limit(limit).all()

{{ CRUDS }}


<<CRUD_GET_BY_ID>>
def get_{{ SELF_CLASS_CC }}_by_id(db: Session, id: int):
    return db.query(model.{{ SELF_CLASS_STD }}).filter(model.{{ SELF_CLASS_STD }}.id == id).first()

{{ CRUDS }}


<<CRUD_UPDATE>>
def update_{{ SELF_CLASS_CC }}_by_id(db: Session, id: int, new_{{ SELF_CLASS_CC }}: schemas.{{ SELF_CLASS_STD }}Update):
    db_{{ SELF_CLASS_CC }} = db.query(model.{{ SELF_CLASS_STD }}).filter(model.{{ SELF_CLASS_STD }}.id == id).first()

    # Converts new_{{ SELF_CLASS_CC }} from model.object to dictionary
    update_{{ SELF_CLASS_CC }} = new_{{ SELF_CLASS_CC }}.dict(exclude_unset=True)

    # Loops through dictionary and update db_{{ SELF_CLASS_CC }}
    for key, value in update_{{ SELF_CLASS_CC }}.items():
        setattr(db_{{ SELF_CLASS_CC }}, key, value)

    db.add(db_{{ SELF_CLASS_CC }})
    db.commit()
    db.refresh(db_{{ SELF_CLASS_CC }})
    return db_{{ SELF_CLASS_CC }}

{{ CRUDS }}


<<CRUD_DELETE>>
def delete_{{ SELF_CLASS_CC }}_by_id(db: Session, id: int):
    db_{{ SELF_CLASS_CC }} = db.query(model.{{ SELF_CLASS_STD }}).filter(model.{{ SELF_CLASS_STD }}.id == id).first()

    db.delete(db_{{ SELF_CLASS_CC }})
    db.commit()
    return {"Success": True}

{{ CRUDS }}


<<ASSIGNMENT_BASE>>
from sqlalchemy.orm import Session
import app.models.{{ SELF_CLASS_CC }}_model as {{ SELF_CLASS_CC }}_models
import app.models.{{ OTHER_CLASS_CC }}_model as {{ OTHER_CLASS_CC }}_models

{{ ASSIGNMENT_INSERT }}

<<ASSIGNMENT_m2m>>
def assign_{{ SELF_CLASS_CC }}_to_{{ OTHER_CLASS_CC }}(db: Session, {{ SELF_CLASS_CC }}_id: int, {{ OTHER_CLASS_CC }}_id: int):
    ''' Assign instance of {{ SELF_CLASS_CC }} to an {{ OTHER_CLASS_CC }}. Many to Many Relationship '''

    # Getting both instance of {{ SELF_CLASS_STD }} and {{ OTHER_CLASS_STD }}
    db_{{ SELF_CLASS_CC }} = db.query({{ SELF_CLASS_CC }}_models.{{ SELF_CLASS_STD }}).filter({{ SELF_CLASS_CC }}_models.{{ SELF_CLASS_STD }}.id == {{ SELF_CLASS_CC }}_id).first()
    db_{{ OTHER_CLASS_CC }} = db.query({{ OTHER_CLASS_CC }}_models.{{ OTHER_CLASS_STD }}).filter(
        {{ OTHER_CLASS_CC }}_models.{{ OTHER_CLASS_STD }}.id == {{ OTHER_CLASS_CC }}_id).first()

    db_{{ OTHER_CLASS_CC }}.{{ SELF_CLASS_CC }}s.append(db_{{ SELF_CLASS_CC }})

    # Update them on the DB side, and commit transaction to the database
    db.add(db_{{ OTHER_CLASS_CC }})
    db.commit()

    return {"Success", True}

def unassign_{{ SELF_CLASS_CC }}_from_{{ OTHER_CLASS_CC }}(db: Session, {{ SELF_CLASS_CC }}_id: int, {{ OTHER_CLASS_CC }}_id: int):
    ''' Unassign instance of {{ SELF_CLASS_CC }} to an {{ OTHER_CLASS_CC }} '''

    # Getting both instance of {{ SELF_CLASS_STD }} and {{ OTHER_CLASS_STD }}
    db_{{ SELF_CLASS_CC }} = db.query({{ SELF_CLASS_CC }}_models.{{ SELF_CLASS_STD }}).filter({{ SELF_CLASS_CC }}_models.{{ SELF_CLASS_STD }}.id == {{ SELF_CLASS_CC }}_id).first()
    db_{{ OTHER_CLASS_CC }} = db.query({{ OTHER_CLASS_CC }}_models.{{ OTHER_CLASS_STD }}).filter(
        {{ OTHER_CLASS_CC }}_models.{{ OTHER_CLASS_STD }}.id == {{ OTHER_CLASS_CC }}_id).first()

    db_{{ OTHER_CLASS_CC }}.{{ SELF_CLASS_CC }}s.remove(db_{{ SELF_CLASS_CC }})

    # Update them on the DB side, and commit transaction to the database
    db.add(db_{{ OTHER_CLASS_CC }})
    db.commit()

    return {"Success", True}


<<ASSIGNMENT_m2o>>
def assign_{{ SELF_CLASS_CC }}_to_{{ OTHER_CLASS_CC }}(db: Session, {{ SELF_CLASS_CC }}_id: int, {{ OTHER_CLASS_CC }}_id: int):
    ''' Assign instance of {{ SELF_CLASS_CC }} to an {{ OTHER_CLASS_CC }}. Many to One Relationship '''

    # Getting both instance of {{ SELF_CLASS_STD }} and {{ OTHER_CLASS_STD }}
    db_{{ SELF_CLASS_CC }} = db.query({{ SELF_CLASS_CC }}_models.{{ SELF_CLASS_STD }}).filter({{ SELF_CLASS_CC }}_models.{{ SELF_CLASS_STD }}.id == {{ SELF_CLASS_CC }}_id).first()
    db_{{ OTHER_CLASS_CC }} = db.query({{ OTHER_CLASS_CC }}_models.{{ OTHER_CLASS_STD }}).filter(
        {{ OTHER_CLASS_CC }}_models.{{ OTHER_CLASS_STD }}.id == {{ OTHER_CLASS_CC }}_id).first()

    # Treat adding relation like adding to {{ SELF_CLASS_CC }} {{ OTHER_CLASS_CC }}'s {{ SELF_CLASS_CC }}s list
    db_{{ OTHER_CLASS_CC }}.{{ SELF_CLASS_CC }}s.append(db_{{ SELF_CLASS_CC }})

    # Update them on the DB side, and commit transaction to the database
    db.add(db_{{ OTHER_CLASS_CC }})
    db.commit()

    return {"Success", True}

def unassign_{{ SELF_CLASS_CC }}_from_{{ OTHER_CLASS_CC }}(db: Session, {{ SELF_CLASS_CC }}_id: int, {{ OTHER_CLASS_CC }}_id: int):
    ''' Unassign instance of {{ SELF_CLASS_CC }} to an {{ OTHER_CLASS_CC }} '''

    # Getting both instance of {{ SELF_CLASS_STD }} and {{ OTHER_CLASS_STD }}
    db_{{ SELF_CLASS_CC }} = db.query({{ SELF_CLASS_CC }}_models.{{ SELF_CLASS_STD }}).filter({{ SELF_CLASS_CC }}_models.{{ SELF_CLASS_STD }}.id == {{ SELF_CLASS_CC }}_id).first()
    db_{{ OTHER_CLASS_CC }} = db.query({{ OTHER_CLASS_CC }}_models.{{ OTHER_CLASS_STD }}).filter(
        {{ OTHER_CLASS_CC }}_models.{{ OTHER_CLASS_STD }}.id == {{ OTHER_CLASS_CC }}_id).first()

    # Treat removing relation like removing from {{ SELF_CLASS_CC }} {{ OTHER_CLASS_CC }}'s {{ SELF_CLASS_CC }}s list
    db_{{ OTHER_CLASS_CC }}.{{ SELF_CLASS_CC }}s.remove(db_{{ SELF_CLASS_CC }})

    # Update them on the DB side, and commit transaction to the database
    db.add(db_{{ OTHER_CLASS_CC }})
    db.commit()

    return {"Success", True}


<<ASSIGNMENT_o2o>>
def assign_{{ SELF_CLASS_CC }}_to_{{ OTHER_CLASS_CC }}(db: Session, {{ SELF_CLASS_CC }}_id: int, {{ OTHER_CLASS_CC }}_id: int):
    ''' Assign instance of {{ SELF_CLASS_CC }} to an {{ OTHER_CLASS_CC }}. One to One Relationship '''
    # Getting both instance of {{ SELF_CLASS_STD }} and {{ OTHER_CLASS_STD }}
    db_{{ SELF_CLASS_CC }} = db.query({{ SELF_CLASS_CC }}_models.{{ SELF_CLASS_STD }}).filter({{ SELF_CLASS_CC }}_models.{{ SELF_CLASS_STD }}.id == {{ SELF_CLASS_CC }}_id).first()
    db_{{ OTHER_CLASS_CC }} = db.query({{ OTHER_CLASS_CC }}_models.{{ OTHER_CLASS_STD }}).filter({{ OTHER_CLASS_CC }}_models.{{ OTHER_CLASS_STD }}.id == {{ OTHER_CLASS_CC }}_id).first()

    # Establish the relationship
    db_{{ SELF_CLASS_CC }}.{{ OTHER_CLASS_CC }} = db_{{ OTHER_CLASS_CC }}

    # Update them on the DB side, and commit transaction to the database
    db.add(db_{{ SELF_CLASS_CC }})
    db.commit()
    return {"Success", True}

def unassign_{{ SELF_CLASS_CC }}_from_{{ OTHER_CLASS_CC }}(db: Session, {{ SELF_CLASS_CC }}_id: int):
    ''' Unassign instance of {{ SELF_CLASS_CC }} to an {{ OTHER_CLASS_CC }} '''

    # Getting both instance of {{ SELF_CLASS_STD }} and {{ OTHER_CLASS_STD }}
    db_{{ SELF_CLASS_CC }} = db.query({{ SELF_CLASS_CC }}_models.{{ SELF_CLASS_STD }}).filter({{ SELF_CLASS_CC }}_models.{{ SELF_CLASS_STD }}.id == {{ SELF_CLASS_CC }}_id).first()
    db_{{ OTHER_CLASS_CC }} = db.query({{ OTHER_CLASS_CC }}_models.{{ OTHER_CLASS_STD }}).filter({{ OTHER_CLASS_CC }}_models.{{ OTHER_CLASS_STD }}.id == db_{{ SELF_CLASS_CC }}.{{ OTHER_CLASS_CC }}.id).first()

    # Clear their relationship
    db_{{ SELF_CLASS_CC }}.{{ OTHER_CLASS_CC }} = None
    db_{{ OTHER_CLASS_CC }}.{{ SELF_CLASS_CC }} = None

    # Update them on the DB side, and commit transaction to the database
    db.add(db_{{ SELF_CLASS_CC }})
    db.add(db_{{ OTHER_CLASS_CC }})
    db.commit()

    return {"Success", True}

